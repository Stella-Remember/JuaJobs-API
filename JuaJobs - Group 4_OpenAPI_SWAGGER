openapi: 3.0.3
info:
  title: JuaJobs API
  description: API for JuaJobs - African gig economy platform
  version: 1.0.0
servers:
  - url: https://api.juajobs.com/v1
    description: Production server
  - url: https://sandbox.juajobs.com/v1
    description: Sandbox server

tags:
  - name: Users
    description: User registration and management
  - name: Profiles
    description: Worker profile management
  - name: Skills
    description: Skills taxonomy management
  - name: Jobs
    description: Job postings management
  - name: Applications
    description: Job applications
  - name: Transactions
    description: Payment transactions
  - name: Notifications
    description: User notifications
  - name: Reviews
    description: User reviews and ratings

paths:
  /users:
    post:
      tags: [Users]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  
  /users/{id}:
    get:
      tags: [Users]
      summary: Retrieve user details
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [Users]
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{id}/profile:
    get:
      tags: [Profiles]
      summary: Get worker profile
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Worker profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerProfile'
    
    put:
      tags: [Profiles]
      summary: Update worker profile
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerProfile'

  /skills:
    get:
      tags: [Skills]
      summary: List all skills
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
    
    post:
      tags: [Skills]
      summary: Create new skill (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillCreate'
      responses:
        '201':
          description: Skill created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /skills/{id}:
    get:
      tags: [Skills]
      summary: Get skill details
      parameters:
        - $ref: '#/components/parameters/SkillId'
      responses:
        '200':
          description: Skill details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
    
    put:
      tags: [Skills]
      summary: Update skill
      parameters:
        - $ref: '#/components/parameters/SkillId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillUpdate'
      responses:
        '200':
          description: Skill updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
    
    delete:
      tags: [Skills]
      summary: Delete skill
      parameters:
        - $ref: '#/components/parameters/SkillId'
      responses:
        '204':
          description: Skill deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /jobs:
    get:
      tags: [Jobs]
      summary: List job postings
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          description: Filter by job status
          schema:
            type: string
            enum: [open, in_progress, completed, cancelled]
      responses:
        '200':
          description: List of job postings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    
    post:
      tags: [Jobs]
      summary: Create job posting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreate'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

  /jobs/{id}:
    get:
      tags: [Jobs]
      summary: Retrieve job posting
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    
    put:
      tags: [Jobs]
      summary: Update job posting
      parameters:
        - $ref: '#/components/parameters/JobId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdate'
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    
    delete:
      tags: [Jobs]
      summary: Delete job posting
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '204':
          description: Job deleted successfully

  /jobs/{id}/applications:
    get:
      tags: [Applications]
      summary: List applications for a job
      parameters:
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'

  /applications:
    post:
      tags: [Applications]
      summary: Apply to a Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
      responses:
        '201':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /applications/{id}:
    get:
      tags: [Applications]
      summary: View application details
      parameters:
        - $ref: '#/components/parameters/ApplicationId'
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /applications/{id}/status:
    patch:
      tags: [Applications]
      summary: Update application status
      parameters:
        - $ref: '#/components/parameters/ApplicationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationStatusUpdate'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /transactions:
    post:
      tags: [Transactions]
      summary: Create transaction for job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

  /transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction status
      parameters:
        - $ref: '#/components/parameters/TransactionId'
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

  /notifications:
    get:
      tags: [Notifications]
      summary: Get notifications for current user
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

  /notifications/{id}/read:
    patch:
      tags: [Notifications]
      summary: Mark notification as read
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /reviews:
    post:
      tags: [Reviews]
      summary: Submit review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      responses:
        '201':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    
    get:
      tags: [Reviews]
      summary: List reviews for a user
      parameters:
        - name: revieweeId
          in: query
          description: ID of the user being reviewed
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

  /reviews/{id}:
    get:
      tags: [Reviews]
      summary: View review
      parameters:
        - $ref: '#/components/parameters/ReviewId'
      responses:
        '200':
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        phone:
          type: string
          example: "+254712345678"
        userType:
          type: string
          enum: [worker, client, admin]
          example: "worker"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    UserCreate:
      type: object
      required: [name, email, password, userType]
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        phone:
          type: string
          example: "+254712345678"
        userType:
          type: string
          enum: [worker, client]
          example: "worker"
    
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: "John Updated"
        email:
          type: string
          format: email
          example: "updated@example.com"
        phone:
          type: string
          example: "+254712345679"
    
    WorkerProfile:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        skills:
          type: array
          items:
            type: string
          example: ["carpentry", "plumbing"]
        experience:
          type: string
          example: "5 years"
        hourlyRate:
          type: number
          format: float
          example: 15.5
        location:
          type: string
          example: "Nairobi, Kenya"
        bio:
          type: string
          example: "Experienced carpenter specializing in furniture making"
    
    WorkerProfileUpdate:
      type: object
      properties:
        skills:
          type: array
          items:
            type: string
        experience:
          type: string
        hourlyRate:
          type: number
          format: float
        location:
          type: string
        bio:
          type: string
    
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Plumbing"
        category:
          type: string
          example: "Construction"
        description:
          type: string
          example: "Pipe installation and repair"
    
    SkillCreate:
      type: object
      required: [name, category]
      properties:
        name:
          type: string
          example: "Plumbing"
        category:
          type: string
          example: "Construction"
        description:
          type: string
          example: "Pipe installation and repair"
    
    SkillUpdate:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        description:
          type: string
    
    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Need a plumber for bathroom installation"
        description:
          type: string
          example: "Looking for experienced plumber to install bathroom fixtures"
        clientId:
          type: string
          format: uuid
        budget:
          type: number
          format: float
          example: 5000.00
        currency:
          type: string
          example: "KES"
        location:
          type: string
          example: "Nairobi"
        status:
          type: string
          enum: [draft, open, in_progress, completed, cancelled]
          example: "open"
        requiredSkills:
          type: array
          items:
            type: string
          example: ["plumbing", "installation"]
    
    JobCreate:
      type: object
      required: [title, description, budget, location]
      properties:
        title:
          type: string
        description:
          type: string
        budget:
          type: number
          format: float
        currency:
          type: string
          default: "KES"
        location:
          type: string
        requiredSkills:
          type: array
          items:
            type: string
    
    JobUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        budget:
          type: number
          format: float
        status:
          type: string
          enum: [draft, open, in_progress, completed, cancelled]
    
    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
        jobId:
          type: string
          format: uuid
        workerId:
          type: string
          format: uuid
        proposal:
          type: string
          example: "I can complete this job in 3 days"
        bidAmount:
          type: number
          format: float
          example: 4500.00
        status:
          type: string
          enum: [pending, accepted, rejected, withdrawn]
          example: "pending"
    
    ApplicationCreate:
      type: object
      required: [jobId, proposal, bidAmount]
      properties:
        jobId:
          type: string
          format: uuid
        proposal:
          type: string
        bidAmount:
          type: number
          format: float
    
    ApplicationStatusUpdate:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [accepted, rejected, withdrawn]
    
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        jobId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        currency:
          type: string
          example: "KES"
        paymentMethod:
          type: string
          enum: [mobile_money, bank_transfer, credit_card]
          example: "mobile_money"
        status:
          type: string
          enum: [pending, completed, failed]
          example: "pending"
        transactionReference:
          type: string
          example: "MPESA123456"
    
    TransactionCreate:
      type: object
      required: [jobId, amount, paymentMethod]
      properties:
        jobId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        paymentMethod:
          type: string
          enum: [mobile_money, bank_transfer, credit_card]
        mobileMoneyNumber:
          type: string
          example: "254712345678"
    
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
          example: "New job application"
        message:
          type: string
          example: "You have a new application for your plumbing job"
        isRead:
          type: boolean
          default: false
        type:
          type: string
          enum: [job_application, application_update, payment, message]
          example: "job_application"
    
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        jobId:
          type: string
          format: uuid
        reviewerId:
          type: string
          format: uuid
        revieweeId:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          example: "Excellent work, completed on time"
    
    ReviewCreate:
      type: object
      required: [jobId, revieweeId, rating]
      properties:
        jobId:
          type: string
          format: uuid
        revieweeId:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid
    
    SkillId:
      name: id
      in: path
      required: true
      description: Skill ID
      schema:
        type: string
        format: uuid
    
    JobId:
      name: id
      in: path
      required: true
      description: Job ID
      schema:
        type: string
        format: uuid
    
    ApplicationId:
      name: id
      in: path
      required: true
      description: Application ID
      schema:
        type: string
        format: uuid
    
    TransactionId:
      name: id
      in: path
      required: true
      description: Transaction ID
      schema:
        type: string
        format: uuid
    
    NotificationId:
      name: id
      in: path
      required: true
      description: Notification ID
      schema:
        type: string
        format: uuid
    
    ReviewId:
      name: id
      in: path
      required: true
      description: Review ID
      schema:
        type: string
        format: uuid
    
    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        default: 1
        minimum: 1
    
    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        default: 20
        maximum: 100

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "validation_error"
                  message:
                    type: string
                    example: "Invalid input data"
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: "email"
                        message:
                          type: string
                          example: "must be a valid email address"
    
    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "unauthorized"
                  message:
                    type: string
                    example: "Authentication required"
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "not_found"
                  message:
                    type: string
                    example: "Resource not found"

securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
